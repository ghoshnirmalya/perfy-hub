type Audit {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  userAgent: String
  environment: JSON
  lighthouseVersion: String
  fetchTime: String
  requestedUrl: String
  finalUrl: String
  audits: JSON
  configSettings: JSON
  categories: JSON
  categoryGroups: JSON
  timing: JSON
  i18n: JSON
  url: Url
}

type AuditAggregator {
  count: Int
}

type AuditConnection {
  values: [Audit]
  groupBy: AuditGroupBy
  aggregate: AuditAggregator
}

type AuditConnection_id {
  key: ID
  connection: AuditConnection
}

type AuditConnectionAudits {
  key: JSON
  connection: AuditConnection
}

type AuditConnectionCategories {
  key: JSON
  connection: AuditConnection
}

type AuditConnectionCategoryGroups {
  key: JSON
  connection: AuditConnection
}

type AuditConnectionConfigSettings {
  key: JSON
  connection: AuditConnection
}

type AuditConnectionCreatedAt {
  key: DateTime
  connection: AuditConnection
}

type AuditConnectionEnvironment {
  key: JSON
  connection: AuditConnection
}

type AuditConnectionFetchTime {
  key: String
  connection: AuditConnection
}

type AuditConnectionFinalUrl {
  key: String
  connection: AuditConnection
}

type AuditConnectionI18n {
  key: JSON
  connection: AuditConnection
}

type AuditConnectionLighthouseVersion {
  key: String
  connection: AuditConnection
}

type AuditConnectionRequestedUrl {
  key: String
  connection: AuditConnection
}

type AuditConnectionTiming {
  key: JSON
  connection: AuditConnection
}

type AuditConnectionUpdatedAt {
  key: DateTime
  connection: AuditConnection
}

type AuditConnectionUrl {
  key: ID
  connection: AuditConnection
}

type AuditConnectionUserAgent {
  key: String
  connection: AuditConnection
}

type AuditGroupBy {
  _id: [AuditConnection_id]
  createdAt: [AuditConnectionCreatedAt]
  updatedAt: [AuditConnectionUpdatedAt]
  userAgent: [AuditConnectionUserAgent]
  environment: [AuditConnectionEnvironment]
  lighthouseVersion: [AuditConnectionLighthouseVersion]
  fetchTime: [AuditConnectionFetchTime]
  requestedUrl: [AuditConnectionRequestedUrl]
  finalUrl: [AuditConnectionFinalUrl]
  audits: [AuditConnectionAudits]
  configSettings: [AuditConnectionConfigSettings]
  categories: [AuditConnectionCategories]
  categoryGroups: [AuditConnectionCategoryGroups]
  timing: [AuditConnectionTiming]
  i18n: [AuditConnectionI18n]
  url: [AuditConnectionUrl]
}

input AuditInput {
  userAgent: String
  environment: JSON
  lighthouseVersion: String
  fetchTime: String
  requestedUrl: String
  finalUrl: String
  audits: JSON
  configSettings: JSON
  categories: JSON
  categoryGroups: JSON
  timing: JSON
  i18n: JSON
  url: ID
}

input createAuditInput {
  data: AuditInput
}

type createAuditPayload {
  audit: Audit
}

input createProjectInput {
  data: ProjectInput
}

type createProjectPayload {
  project: Project
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createUrlInput {
  data: UrlInput
}

type createUrlPayload {
  url: Url
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

"""
The `DateTime` scalar represents a date and time following the ISO 8601 standard
"""
scalar DateTime

input deleteAuditInput {
  where: InputID
}

type deleteAuditPayload {
  audit: Audit
}

input deleteProjectInput {
  where: InputID
}

type deleteProjectPayload {
  project: Project
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteUrlInput {
  where: InputID
}

type deleteUrlPayload {
  url: Url
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

input editAuditInput {
  userAgent: String
  environment: JSON
  lighthouseVersion: String
  fetchTime: String
  requestedUrl: String
  finalUrl: String
  audits: JSON
  configSettings: JSON
  categories: JSON
  categoryGroups: JSON
  timing: JSON
  i18n: JSON
  url: ID
}

input editFileInput {
  name: String
  hash: String
  sha256: String
  ext: String
  mime: String
  size: String
  url: String
  provider: String
  public_id: String
  related: [ID]
}

input editProjectInput {
  name: String
  users: [ID]
  urls: [ID]
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input editUrlInput {
  link: String
  project: ID
  audits: [ID]
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  projects: [ID]
}

input FileInput {
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related: [ID]
}

input InputID {
  id: ID!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | Audit | createAuditPayload | updateAuditPayload | deleteAuditPayload | AuditConnection | AuditAggregator | AuditGroupBy | AuditConnection_id | AuditConnectionCreatedAt | AuditConnectionUpdatedAt | AuditConnectionUserAgent | AuditConnectionEnvironment | AuditConnectionLighthouseVersion | AuditConnectionFetchTime | AuditConnectionRequestedUrl | AuditConnectionFinalUrl | AuditConnectionAudits | AuditConnectionConfigSettings | AuditConnectionCategories | AuditConnectionCategoryGroups | AuditConnectionTiming | AuditConnectionI18n | AuditConnectionUrl | Project | createProjectPayload | updateProjectPayload | deleteProjectPayload | ProjectConnection | ProjectAggregator | ProjectGroupBy | ProjectConnection_id | ProjectConnectionCreatedAt | ProjectConnectionUpdatedAt | ProjectConnectionName | Url | createUrlPayload | updateUrlPayload | deleteUrlPayload | UrlConnection | UrlAggregator | UrlGroupBy | UrlConnection_id | UrlConnectionCreatedAt | UrlConnectionUpdatedAt | UrlConnectionLink | UrlConnectionProject | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileGroupBy | UploadFileConnection_id | UploadFileConnectionCreatedAt | UploadFileConnectionUpdatedAt | UploadFileConnectionName | UploadFileConnectionHash | UploadFileConnectionSha256 | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionProvider | UploadFileConnectionPublic_id | UsersPermissionsPermission | UsersPermissionsRole | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnection_id | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | UsersPermissionsUser | createUserPayload | updateUserPayload | deleteUserPayload | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnection_id | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole

type Mutation {
  createAudit(input: createAuditInput): createAuditPayload
  updateAudit(input: updateAuditInput): updateAuditPayload
  deleteAudit(input: deleteAuditInput): deleteAuditPayload
  createProject(input: createProjectInput): createProjectPayload
  updateProject(input: updateProjectInput): updateProjectPayload
  deleteProject(input: deleteProjectInput): deleteProjectPayload
  createUrl(input: createUrlInput): createUrlPayload
  updateUrl(input: updateUrlInput): updateUrlPayload
  deleteUrl(input: deleteUrlInput): deleteUrlPayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, source: String, file: Upload!): UploadFile!
}

type Project {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  urls(sort: String, limit: Int, start: Int, where: JSON): [Url]
}

type ProjectAggregator {
  count: Int
}

type ProjectConnection {
  values: [Project]
  groupBy: ProjectGroupBy
  aggregate: ProjectAggregator
}

type ProjectConnection_id {
  key: ID
  connection: ProjectConnection
}

type ProjectConnectionCreatedAt {
  key: DateTime
  connection: ProjectConnection
}

type ProjectConnectionName {
  key: String
  connection: ProjectConnection
}

type ProjectConnectionUpdatedAt {
  key: DateTime
  connection: ProjectConnection
}

type ProjectGroupBy {
  _id: [ProjectConnection_id]
  createdAt: [ProjectConnectionCreatedAt]
  updatedAt: [ProjectConnectionUpdatedAt]
  name: [ProjectConnectionName]
}

input ProjectInput {
  name: String
  users: [ID]
  urls: [ID]
}

type Query {
  audit(id: ID!): Audit
  audits(sort: String, limit: Int, start: Int, where: JSON): [Audit]
  auditsConnection(sort: String, limit: Int, start: Int, where: JSON): AuditConnection
  project(id: ID!): Project
  projects(sort: String, limit: Int, start: Int, where: JSON): [Project]
  projectsConnection(sort: String, limit: Int, start: Int, where: JSON): ProjectConnection
  url(id: ID!): Url
  urls(sort: String, limit: Int, start: Int, where: JSON): [Url]
  urlsConnection(sort: String, limit: Int, start: Int, where: JSON): UrlConnection
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
  me: UsersPermissionsMe
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input updateAuditInput {
  where: InputID
  data: editAuditInput
}

type updateAuditPayload {
  audit: Audit
}

input updateProjectInput {
  where: InputID
  data: editProjectInput
}

type updateProjectPayload {
  project: Project
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateUrlInput {
  where: InputID
  data: editUrlInput
}

type updateUrlPayload {
  url: Url
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileAggregator {
  count: Int
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileConnection_id {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionCreatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionPublic_id {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSha256 {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionUpdatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileGroupBy {
  _id: [UploadFileConnection_id]
  createdAt: [UploadFileConnectionCreatedAt]
  updatedAt: [UploadFileConnectionUpdatedAt]
  name: [UploadFileConnectionName]
  hash: [UploadFileConnectionHash]
  sha256: [UploadFileConnectionSha256]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  provider: [UploadFileConnectionProvider]
  public_id: [UploadFileConnectionPublic_id]
}

type Url {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  link: String
  project: Project
  audits(sort: String, limit: Int, start: Int, where: JSON): [Audit]
}

type UrlAggregator {
  count: Int
}

type UrlConnection {
  values: [Url]
  groupBy: UrlGroupBy
  aggregate: UrlAggregator
}

type UrlConnection_id {
  key: ID
  connection: UrlConnection
}

type UrlConnectionCreatedAt {
  key: DateTime
  connection: UrlConnection
}

type UrlConnectionLink {
  key: String
  connection: UrlConnection
}

type UrlConnectionProject {
  key: ID
  connection: UrlConnection
}

type UrlConnectionUpdatedAt {
  key: DateTime
  connection: UrlConnection
}

type UrlGroupBy {
  _id: [UrlConnection_id]
  createdAt: [UrlConnectionCreatedAt]
  updatedAt: [UrlConnectionUpdatedAt]
  link: [UrlConnectionLink]
  project: [UrlConnectionProject]
}

input UrlInput {
  link: String
  project: ID
  audits: [ID]
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  projects: [ID]
}

type UsersPermissionsMe {
  _id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  _id: ID!
  name: String!
  description: String
  type: String
}

type UsersPermissionsPermission {
  _id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  _id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleAggregator {
  count: Int
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleConnection_id {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleGroupBy {
  _id: [UsersPermissionsRoleConnection_id]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsUser {
  _id: ID!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
  projects(sort: String, limit: Int, start: Int, where: JSON): [Project]
}

type UsersPermissionsUserAggregator {
  count: Int
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserConnection_id {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserGroupBy {
  _id: [UsersPermissionsUserConnection_id]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
}
